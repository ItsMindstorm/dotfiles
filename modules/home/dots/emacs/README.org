#+TITLE: My config for Emacs
#+STARTUP: showeverything
#+OPTIONS: :toc:2
#+PROPERTY: header-args :tangle init.el
#+auto_tangle: yes

* Important programs to load first
** Disable package.el
#+begin_src elisp :tangle early-init.el
  (setq package-enable-at-startup nil)
#+end_src

** Package manager
#+begin_src elisp
  (defvar elpaca-installer-version 0.5)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil :files (:defaults (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo) (make-directory repo t)
            (when (< emacs-major-version 28) (require 'subr-x))
            (condition-case-unless-debug err
                (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                         ((zerop (call-process "git" nil buffer t "clone"
                                               (plist-get order :repo) repo)))
                         ((zerop (call-process "git" nil buffer t "checkout"
                                               (or (plist-get order :ref) "--"))))
                         (emacs (concat invocation-directory invocation-name))
                         ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                               "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                         ((require 'elpaca))
                         ((elpaca-generate-autoloads "elpaca" repo)))
                    (progn (message "%s" (buffer-string)) (kill-buffer buffer))
                  (error "%s" (with-current-buffer buffer (buffer-string))))
              ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))
#+end_src

** Load Evil Mode
#+begin_src elisp
  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable :elpaca use-package keyword.
    (elpaca-use-package-mode)
    ;; Assume :elpaca t unless otherwise specified.
    (setq elpaca-use-package-by-default t))

  ;; Block until current queue processed.
  (elpaca-wait)

  ;;When installing a package which modifies a form used at the top-level
  ;;(e.g. a package which adds a use-package key word),
  ;;use `elpaca-wait' to block until that package has been installed/configured.
  ;;For example:
  ;;(use-package general :demand t)
  ;;(elpaca-wait)

  ;; Expands to: (elpaca evil (use-package evil :demand t))
  (use-package evil
    :init
    (setq
     evil-want-keybinding nil
     evil-vsplit-window-right t
     evil-split-window-below t
     evil-set-undo-system 'undo-redo
     )
    (evil-mode) )

  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))

  (use-package evil-tutor)

  ;;Turns off elpaca-use-package-mode current declartion
  ;;Note this will cause the declaration to be interpreted immediately (not deferred).
  ;;Useful for configuring built-in emacs features.
  (use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))

  ;; Don't install anything. Defer execution of BODY
  (elpaca nil (message "Packages loaded"))


#+end_src

** Exec commands from path
#+begin_src elisp 
(use-package exec-path-from-shell
  :config
  (when (daemonp)
    (exec-path-from-shell-initialize)))
#+end_src

** General Keybindings
#+begin_src elisp
(use-package general
  :config
  (general-evil-setup)
  (general-create-definer ys/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC"
    :global-prefix "M-SPC")


  (ys/leader-keys
    "b" '(:ignore t :wk "buffer")
    "bb" '(switch-to-buffer :wk "Switch buffer")
    "bn" '(next-buffer :wk "Next buffer")
    "bp" '(previous-buffer :wk "Previous buffer")
    "p" '(:ignore t :wk "projectile")
    "pp" '(helm-projectile :wk "Go to project") 
    "pf" '(helm-projectile-find-file :wk "Find file")
    "pb" '(helm-projectile-switch-to-buffer :wk "Switch to buffer")
    )

  (ys/leader-keys
    "o" '(:ignore t :wk "Org")
    "oa" '(org-agenda :wk "Org agenda")
    "oe" '(org-export-dispatch :wk "Org export")
    "oi" '(org-toggle-item :wk "Org toggle Item")
    "ot" '(org-todo :wk "Org Todo")
    "oT" '(org-todo-list :wk "Org Todo List")
    )

  (ys/leader-keys
    "c" '(:ignore t :wk "Tabs")
    "cn" '(centaur-tabs-forward :wk "Next tab")
    "cp" '(centaur-tabs-backward :wk "Previous tab")
    "cx" '(kill-this-buffer :wk "Kill this buffer")
    )

  (ys/leader-keys
    "g" '(magit :wk "Open magit"))

  (ys/leader-keys
    "w" '(:ignore t :wk "Windows")
    ;; Window splits
    "w c" '(evil-window-delete :wk "Close window")
    "w n" '(evil-window-new :wk "New window")
    "w s" '(evil-window-split :wk "Horizontal split window")
    "w v" '(evil-window-vsplit :wk "Vertical split window")
    ;; Window motions
    "w h" '(evil-window-left :wk "Window left")
    "w j" '(evil-window-down :wk "Window down")
    "w k" '(evil-window-up :wk "Window up")
    "w l" '(evil-window-right :wk "Window right")
    "w w" '(evil-window-next :wk "Goto next window")
    ;; Move Windows
    "w H" '(buf-move-left :wk "Buffer move left")
    "w J" '(buf-move-down :wk "Buffer move down")
    "w K" '(buf-move-up :wk "Buffer move up")
    "w L" '(buf-move-right :wk "Buffer move right"))
  )
#+end_src

** Ability to reload config
#+begin_src elisp 
  (defun reload-init-file ()
    (interactive)
    (load-file user-init-file)
    (load-file user-init-file)
    )
#+end_src

** Set font size
#+begin_src elisp 
  (add-to-list 'default-frame-alist '(font . "JetBrainsMono NF-15"))
#+end_src

** Tabs
#+begin_src elisp
  (use-package centaur-tabs
    :defer 5
    :diminish centaur-tabs-mode
    :config (centaur-tabs-mode t)
    )
#+end_src

** Status bar
*** Doom modeline
#+begin_src elisp  
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+end_src

*** Fonts needed for doom modeline
#+begin_src elisp 
  (use-package nerd-icons
    :custom
    (nerd-icons-font-family "JetBrainsMono NF"))

#+end_src

* Useful functions to move splits around
#+begin_src elisp
  (require 'windmove)

  ;;;###autoload
  (defun buf-move-up ()
    "Swap the current buffer and the buffer above the split.
  If there is no split, ie now window above the current one, an
  error is signaled."
    ;;  "Switches between the current buffer, and the buffer above the
    ;;  split, if possible."
    (interactive)
    (let* ((other-win (windmove-find-other-window 'up))
           (buf-this-buf (window-buffer (selected-window))))
      (if (null other-win)
          (error "No window above this one")
        ;; swap top with this one
        (set-window-buffer (selected-window) (window-buffer other-win))
        ;; move this one to top
        (set-window-buffer other-win buf-this-buf)
        (select-window other-win))))

  ;;;###autoload
  (defun buf-move-down ()
    "Swap the current buffer and the buffer under the split.
  If there is no split, ie now window under the current one, an
  error is signaled."
    (interactive)
    (let* ((other-win (windmove-find-other-window 'down))
           (buf-this-buf (window-buffer (selected-window))))
      (if (or (null other-win) 
              (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
          (error "No window under this one")
        ;; swap top with this one
        (set-window-buffer (selected-window) (window-buffer other-win))
        ;; move this one to top
        (set-window-buffer other-win buf-this-buf)
        (select-window other-win))))

  ;;;###autoload
  (defun buf-move-left ()
    "Swap the current buffer and the buffer on the left of the split.
  If there is no split, ie now window on the left of the current
  one, an error is signaled."
    (interactive)
    (let* ((other-win (windmove-find-other-window 'left))
           (buf-this-buf (window-buffer (selected-window))))
      (if (null other-win)
          (error "No left split")
        ;; swap top with this one
        (set-window-buffer (selected-window) (window-buffer other-win))
        ;; move this one to top
        (set-window-buffer other-win buf-this-buf)
        (select-window other-win))))

  ;;;###autoload
  (defun buf-move-right ()
    "Swap the current buffer and the buffer on the right of the split.
  If there is no split, ie now window on the right of the current
  one, an error is signaled."
    (interactive)
    (let* ((other-win (windmove-find-other-window 'right))
           (buf-this-buf (window-buffer (selected-window))))
      (if (null other-win)
          (error "No right split")
        ;; swap top with this one
        (set-window-buffer (selected-window) (window-buffer other-win))
        ;; move this one to top
        (set-window-buffer other-win buf-this-buf)
        (select-window other-win))))

#+end_src

* Make Emacs look better
** Relative lines
#+begin_src elisp
  (use-package linum-relative
    )
#+end_src
** Disable menubar, toolbar
#+begin_src elisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Disable Line numbers and truncated Lines
#+begin_src elisp
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)

#+end_src

** Zoom in and out
#+begin_src elisp 
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

** Extra cool stuff
#+begin_src elisp
  (setq
   case-fold-search nil
   use-short-answers t
   confirm-kill-processes nil
   make-backup-files nil
   auto-save-default nil
   create-lockfiles nil)
#+end_src

* ORG mode
** Table of contents
#+begin_src elisp
  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Org bullets
#+begin_src elisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Org tempo
#+begin_src elisp
  (require 'org-tempo)
#+end_src

** Org agenda
#+begin_src elisp 
  (custom-set-variables
   '(org-directory "~/org")
   '(org-agenda-files (list org-directory)))
#+end_src

** Org babel 
*** Auto tangle
#+begin_src elisp 
  (use-package org-auto-tangle
    :defer t
    :hook (org-mode . org-auto-tangle-mode))
#+end_src

** Other langs
#+begin_src elisp 
  (org-babel-do-load-languages
  'org-babel-load-languages
  '((js . t)
  (python . t)))
#+end_src

** Electric pairs
#+begin_src elisp
  (add-hook 'prog-mode-hook 'electric-pair-mode)
#+end_src

* Which key
#+begin_src elisp
  (use-package which-key
    :init
    (which-key-mode 1)
    :config
    (setq which-key-side-window-location 'bottom
          which-key-sort-order #'which-key-key-order-alpha
          which-key-sort-uppercase-first nil
          which-key-add-column-padding 1
          which-key-max-display-columns nil
          which-key-min-display-lines 6
          which-key-side-window-slot -10
          which-key-side-window-max-height 0.25
          which-key-idle-delay 0.8
          which-key-max-description-length 25
          which-key-allow-imprecise-window-fit t))
#+end_src

* Diminish
#+begin_src elisp
  (use-package diminish)
#+end_src

* Code related stuff
** Icons
#+begin_src elisp
  (use-package all-the-icons
    :if (display-graphic-p))
#+end_src

** Ligatures
#+begin_src elisp
  (use-package ligature
    :load-path "path-to-ligature-repo"
    :config
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    ;; Enable all Cascadia Code ligatures in programming modes
    (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                         ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                         "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                         "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                         "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                         "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                         "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                         "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                         ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                         "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                         "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                         "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                         "\\\\" "://"))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))
#+end_src

** Rainbow mode
Displays the actual color of a hex code as its background
#+begin_src elisp
  (use-package rainbow-mode
    :diminish rainbow-mode
    :hook org-mode prog-mode)

#+end_src
** Lsp-mode
#+begin_src elisp
  (use-package lsp-mode
    :ensure t
    :init
    (setq lsp-keymap-prefix "C-c l"
          lsp-log-io nil
          lsp-restart 'auto-restart
          lsp-ui-sideline-show-hover t
          )
    :hook (
           (prog-mode-hook . lsp)
           (lsp-mode . lsp-enable-which-key-integration))
    :commands (lsp lsp-deferred)
    )
#+end_src

Typescript
#+begin_src elisp 
  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :hook (javascript-mode . lsp-deferred)
    :config
    (setq-default typescript-indent-level 2)
    (setq-default javascript-indent-level 2)
    )

#+end_src

For nix files
#+begin_src elisp 
  (use-package nix-mode
    :mode "\\.nix\\'")
#+end_src


** Lsp mode extras
*** Ui
Lsp ui
#+begin_src elisp
  (use-package lsp-ui :hook (lsp-mode . lsp-ui-mode)

    :custom (
             lsp-ui-doc-position 'bottom))
  (use-package helm-lsp :commands helm-lsp-workspace-symbol)
  (use-package helm-projectile :commands helm-projectile)
  (use-package dap-mode)
#+end_src 

Indent guidelines
#+begin_src elisp 
  (use-package highlight-indent-guides
    :diminish highlight-indent-guides-mode
    :hook (prog-mode . highlight-indent-guides-mode)
    :config
    (setq highlight-indent-guides-method 'character)
    :config
    (setq highlight-indent-guides-responsive 'top))
#+end_src

*** Formatter
#+begin_src elisp 
  (use-package format-all
    :init
    (add-hook 'prog-mode-hook 'format-all-mode)
    (add-hook 'format-all-mode-hook 'format-all-ensure-formatter)
    )
#+end_src

** Highlighting
*** Treesitter
#+begin_src elisp
  (use-package tree-sitter
    :hook (typescript-mode . tree-sitter-hl-mode))

  (use-package tree-sitter-langs)

#+end_src

*** Brackets
**** Coloring
#+begin_src elisp
  (make-variable-buffer-local 'show-paren-mode)
  (show-paren-mode 1)
  (setq show-paren-style 'parenthesis)
  (setq show-paren-delay 0)

  (use-package rainbow-delimiters
    :diminish rainbow-delimiters-mode
    :hook ((prog-mode . rainbow-delimiters-mode)))
#+end_src

** Project management
#+begin_src elisp
  (use-package projectile
    :config
    (projectile-mode 1))
#+end_src

** Completion
*** Company
#+begin_src elisp
  (use-package company 
    :after lsp-mode
    :diminish company-mode
    :custom
    (company-idle-delay 0.0)
    (company-minimum-prefix-length 1)
    :init
    (add-hook 'after-init-hook 'global-company-mode))

  (defvar company-backends nil)
  (add-to-list 'company-backends '(company-yasnippet company-dabbrev))

  (use-package company-box
    :after company
    :diminish
    :hook (company-mode . company-box-mode))
#+end_src

*** Yassnippets
#+begin_src elisp
        (use-package yasnippet
          :diminish yas-minor-mode
          :config
          (yas/global-mode)
          )
        (setq yas-snippet-dirs '("~/Git-repos/dotfiles/modules/home/dots/snippets"))
        (use-package yasnippet-snippets)
#+end_src

*** Magit
#+begin_src elisp
  (use-package magit
    :diminish magit-mode
    )
#+end_src

** File tree
#+begin_src elisp
  (use-package neotree
    :ensure t
    :config
    (ys/leader-keys
      "n" '(neotree-toggle :wk "Toggle neotree"))
    (setq
     neo-theme 'icons
     neo-smart-open t
     neo-show-hidden-file t
     neo-window-width 30)
     (add-hook 'neotree-mode-hook
               (lambda ()
                 (define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter)
                 (define-key evil-normal-state-local-map (kbd "SPC") 'neotree-quick-look)
                 (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
                 (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)
                 (define-key evil-normal-state-local-map (kbd "g") 'neotree-refresh)
                 (define-key evil-normal-state-local-map (kbd "n") 'neotree-next-line)
                 (define-key evil-normal-state-local-map (kbd "p") 'neotree-previous-line)
                 (define-key evil-normal-state-local-map (kbd "A") 'neotree-stretch-toggle)
                 (define-key evil-normal-state-local-map (kbd "d") 'neotree-delete-node)
                 (define-key evil-normal-state-local-map (kbd "a") 'neotree-create-node)
                 (define-key evil-normal-state-local-map (kbd "r") 'neotree-rename-node)
                 (define-key evil-normal-state-local-map (kbd "H") 'neotree-hidden-file-toggle)))
     (add-hook 'neo-after-create-hook
               #'(lambda (_)
                   (with-current-buffer (get-buffer neo-buffer-name)
                     (setq truncate-lines t)
                     (setq word-wrap nil)
                     (make-local-variable 'auto-hscroll-mode)
                     (setq auto-hscroll-mode nil)))))
#+end_src

** Terminal
#+begin_src elisp
     (use-package vterm
     :config
     (ys/leader-keys
  "t" '(vterm-toggle :wk "term")
  ))

#+end_src

#+begin_src elisp 
  (use-package vterm-toggle
    :after vterm
    :config
    (setq vterm-toggle-fullscreen-p nil)
    (setq vterm-toggle-scope 'project)
    (add-to-list 'display-buffer-alist
                 '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                   (display-buffer-reuse-window display-buffer-at-bottom)
                   ;;(display-buffer-reuse-window display-buffer-in-direction)
                   ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                   ;;(direction . bottom)
                   (dedicated . t) ;dedicated is supported in emacs27
                   (reusable-frames . visible)
                   (window-height . 0.3))))
#+end_src

** Sudo edit
Allows to open files with sudo or switched over to it if we did not open it with sudo yet
#+begin_src elisp
  (use-package sudo-edit
    :config
    (ys/leader-keys
      "fu" '(sudo-edit-find-file :wk "Sudo find file")
      "fU" '(sudo-edit :wk "Sudo edit file")))
#+end_src

* Dashboard
#+begin_src elisp
  (use-package dashboard
  :ensure t
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)

  :config
  (dashboard-setup-startup-hook))

#+end_src

* Theming
#+begin_src elisp
  (use-package catppuccin-theme 
    :ensure t
    :config
    (load-theme 'catppuccin t)
    (setq catppuccin-flavor 'mocha)
    )
#+end_src 

* Spell checker
This code snippet is borrowed with courtesy from [[https://github.com/doomemacs/doomemacs/blob/master/modules/checkers/grammar/config.el][Doom emacs]]
#+begin_src elisp 
  (use-package langtool
    :commands (langtool-check
               langtool-check-done
               langtool-show-message-at-point
               langtool-correct-buffer)
    :init (setq langtool-default-language "en-US")
    :config
    (unless (or langtool-bin
                langtool-language-tool-jar
                langtool-java-classpath)
      (cond ((setq langtool-bin
                   (or (executable-find "languagetool-commandline")
                       (executable-find "languagetool")))))))  ; for nixpkgs.languagetool
#+end_src
