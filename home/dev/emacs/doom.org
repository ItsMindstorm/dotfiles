#+title: My Doom config

* Configuration
** Doom confs
*** Personal info
#+begin_src emacs-lisp
(setq user-full-name "Yves Straten"
      user-mail-address "yves.straten@gmail.com")
#+end_src

*** Font
Doom exposes five (optional) variables for controlling fonts in Doom:
- `doom-font' -- the primary font to use
- `doom-variable-pitch-font' -- a non-monospace font (where applicable)
- `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.
- `doom-symbol-font' -- for symbols
- `doom-serif-font' -- for the `fixed-pitch-serif' face

See 'C-h v doom-font' for documentation and more examples of what they accept. For example:

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "JetBrainsMono Nerd Font" :size 21 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "JetBrainsMono NF" :size 19))
#+end_src

*** Theme & Line numbers
#+begin_src emacs-lisp
(setq doom-theme 'kaolin-temple)

(set-frame-parameter (selected-frame) 'alpha '(95 . 95))
(add-to-list 'default-frame-alist '(alpha . (95 . 95)))

(setq display-line-numbers-type 'relative)
#+end_src

*** Dashboard
#+begin_src emacs-lisp
(setq fancy-splash-image (concat doom-user-dir "banner.png"))

(after! doom-dashboard
  (use-package! +doom-dashboard)
  )
#+end_src

#+RESULTS:

** Custom confs
*** Evil
#+begin_src elisp
(after! evil
  (use-package! evil
    :config (setq scroll-margin 8)))
#+end_src

*** Corfu
Workaround as corfu seems to write the entire type, e.g System.int will complete into System.in : PrintStream

#+begin_src emacs-lisp
(after! corfu
  (add-hook 'java-mode-hook (lambda ()
                              (setq-local corfu-preview-current nil))
            ))
#+end_src

*** LSP
**** Java
#+begin_src emacs-lisp
(after! lsp-java
  (use-package! lsp-java
    :config
    (setq lsp-java-server-install-dir (getenv "JDTLS_PATH"))
    (defun lsp-java--ls-command ()
      (list "jdtls"
          "-configuration" (concat (getenv "HOME") "/.cache/jdtls/")
          "-data" (concat (getenv "HOME") "/.jdtls"))
    )))
#+end_src

#+RESULTS:
: t

**** Nix
#+begin_src emacs-lisp
(after! lsp-mode
  (use-package! lsp-mode
    :config
    (setq lsp-headerline-breadcrumb-enable t
          lsp-inlay-hint-enable t)
    ))
#+end_src

#+RESULTS:

*** Rainbow-mode
#+begin_src emacs-lisp
(use-package! rainbow-mode
  :hook (doom-first-buffer . rainbow-mode))
#+end_src

*** Beacon on cursor
#+begin_src emacs-lisp
(use-package! beacon
  :config
  (setq beacon-dont-blink-major-modes
        (append '(vterm-mode +doom-dashboard-mode dap-mode pdf-view-mode) beacon-dont-blink-major-modes))
  (beacon-mode))
#+end_src

*** Neotree
#+begin_src emacs-lisp
(after! neotree
  (use-package! neotree
    :config
    (setq neo-smart-open 1
          neo-theme (if (display-graphic-p) 'icons 'arrow)
          neo-window-width 20
          neo-autorefresh 1
          neo-show-hidden-files 1)
    :bind (:map evil-normal-state-map
                ("C-n" . neotree-toggle))))
#+end_src

*** LaTeX
**** Pdf tools
#+begin_src emacs-lisp
(after! pdf-tools
  (use-package! pdf-tools
    :hook
    (pdf-view-mode . pdf-view-midnight-minor-mode)))

(after! centaur-tabs
  (use-package! pdf-tools
    :hook
    (pdf-view-mode . centaur-tabs-local-mode)
    (LaTeX-mode . centaur-tabs-local-mode)
    (dired-mode . centaur-tabs-local-mode)))

(setq large-file-warning-threshold nil)
#+end_src

**** Default pdf program
#+begin_src emacs-lisp
(after! tex
  (use-package! tex
    :if (eq system-type 'darwin)
    :config
    (setq TeX-view-program-selection '((output-pdf "open")))
    )

  (use-package! tex
    :config
    (setq TeX-view-program-selection '((output-pdf "Zathura")))
    )
  )

#+end_src

**** Auto-compile
#+begin_src emacs-lisp :tangle no
(after! tex
  (use-package! tex
    :hook
    (LaTeX-mode .
                (lambda ()
                  (add-hook 'after-save-hook
                            (lambda ()
                              (setq-local split-height-threshold 90)
                              (setq-local split-width-threshold 60)
                              (TeX-save-document (TeX-master-file))
                              (TeX-command-run-all nil))
                            0 t)))))
#+end_src

**** Settings
#+begin_src emacs-lisp
(setq TeX-command-extra-options "-shell-escape")
(setq shell-escape-mode "-shell-escape")
(setq-default TeX-master nil)
#+end_src

*** Discord
#+begin_src emacs-lisp :tangle no
(if (not (daemonp))
      (use-package! elcord
        :init (elcord-mode)
        :config
        (setq elcord-editor-icon 'emacs_icon))
  )

#+end_src

*** Keymaps
**** Centaur
#+begin_src emacs-lisp
(map! :leader
      :desc "Kill buffer" "x" #'centaur-tabs--kill-this-buffer-dont-ask
      :desc "Kill all other buffers" "X" #'centaur-tabs-kill-other-buffers-in-current-group
      )
#+end_src

**** Lsp
#+begin_src emacs-lisp
(map! :leader
      :desc "Format" "lf" #'+format/buffer
      :desc "Rename" "lr" #'lsp-rename)
#+end_src

**** Evil windows
#+begin_src emacs-lisp
(map! :leader
      :desc "Split" "sh" #'split-window-horizontally
      :desc "vsplit" "sv" #'split-window-vertically)
#+end_src

*** Eshell (windows)
#+begin_src emacs-lisp
(when (modulep! :term eshell)
  (map! :leader
        :desc "Eshell" "ot" #'eshell))
#+end_src

* Main packages
#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

(package! elcord
  :recipe (:host github :repo "Mstrodl/elcord")
  )

(package! beacon)

(package! rainbow-mode)
(package! evil-tutor)
;; (package! xenops)
(package! all-the-icons-dired)

(package! latex-preview-pane :disable t)
(package! doom-dashboard :disable t)
(package! dashboard)
(package! dirvish)

(package! screenshot
  :recipe (:host github :repo "tecosaur/screenshot"))

(package! kaolin-themes)

;; (if (not (eq system-type 'windows-nt ))
;;     (package! pdf-tools :built-in 'prefer))
#+end_src
