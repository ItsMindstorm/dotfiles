#+Title: My Emacs config
#+Property: header-args :tangle init.el 
#+auto_tangle: t
#+startup: overview 
* Bootstrap
** Deactivate package.el
#+begin_src elisp :tangle early-init.el
  (setq package-enable-at-startup nil)
#+end_src

** Elpaca 
#+begin_src elisp
  (defvar elpaca-installer-version 0.5)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil
                                :files (:defaults (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                   ((zerop (call-process "git" nil buffer t "clone"
                                         (plist-get order :repo) repo)))
                   ((zerop (call-process "git" nil buffer t "checkout"
                                         (or (plist-get order :ref) "--"))))
                   (emacs (concat invocation-directory invocation-name))
                   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                         "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                   ((require 'elpaca))
                   ((elpaca-generate-autoloads "elpaca" repo)))
              (progn (message "%s" (buffer-string)) (kill-buffer buffer))
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))
#+end_src

** Use package 
#+begin_src elisp
  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable :elpaca use-package keyword.
    (elpaca-use-package-mode)
    ;; Assume :elpaca t unless otherwise specified.
    (setq elpaca-use-package-by-default t))

  ;; Block until current queue processed.
  (elpaca-wait)
#+end_src

** Ability to reload configuration
#+begin_src elisp
(defun reload-init-file ()
  "Reload the `init.el` configuration file."
  (interactive)
  (load-file (expand-file-name "~/.emacs.d/init.el")))
#+end_src


* Evil
#+begin_src elisp
  (use-package evil
    :init
    (setq evil-want-C-u-scroll t
          evil-want-keybinding nil) ;; Enable C-u for scrolling
    :config
    (evil-mode 1)
    (evil-set-undo-system 'undo-redo))
#+end_src

** Unbind certain keys
- RET
#+begin_src elisp
  (with-eval-after-load 'evil-maps
    (define-key evil-motion-state-map (kbd "RET") nil))
#+end_src

** Evil collection
#+begin_src elisp
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
#+end_src

** Evil commenter
#+begin_src elisp
  (use-package evil-nerd-commenter
    :after evil)
#+end_src
 

* Org-mode
** Table of contents 
#+begin_src elisp
  (use-package toc-org
    :defer
    :commands toc-org-enable
    :hook (org-mode . toc-org-enable))
#+end_src

** Bullets & Todos
#+begin_src elisp
  (use-package org-superstar
    :defer
    :hook
    (org-mode . (lambda () (org-superstar-mode 1)))
    :config
    (setq org-ellipsis "‚§µ"
          org-superstar-special-todo-items t
          org-superstar-todo-bullet-alist
          '(("TODO" . ?‚òê)
            ("DONE" . ?‚úî))))
#+end_src

** Presentations
#+begin_src elisp
  (use-package org-tree-slide
    :defer
    :commands (org-tree-slide-mode)
    :bind
    ("<f8>" . org-tree-slide-move-previous-tree)
    ("<f9>" . org-tree-slide-move-next-tree)
    )
#+end_src

** Babel
*** Code blocks
#+begin_src elisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((js . t)
   (C . t)
   (java . t)
   (python . t)))
#+end_src

**** Java settings
#+begin_src elisp
  (nconc org-babel-default-header-args:java
	 '((:dir . "/tmp/")))
#+end_src

**** JS settings
#+begin_src elisp
  (setq org-babel-default-header-args:js
               '((:exports . "both") (:results . "output")))
#+end_src

#+RESULTS:
: ((:exports . both) (:results . output))

**** Syntax highlight in export
#+begin_src elisp
  (setq org-latex-listings 'minted
	org-latex-packages-alist '(("" "minted"))
	org-latex-pdf-process
	'("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	  "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+end_src

**** No confirm
#+begin_src elisp
  (setq org-confirm-babel-evaluate nil)
#+end_src

*** Automatic tangle
#+begin_src elisp
  (use-package org-auto-tangle
    :defer
    :hook (org-mode . org-auto-tangle-mode))
#+end_src

** Agenda 
*** Discover files
#+begin_src elisp
  (setq org-directory "~/org")
  (setq org-agenda-files '("Todos.org"))
#+end_src

*** Custom view
Credit to Derek Taylor
#+begin_src elisp
(setq
 ;; org-fancy-priorities-list '("[A]" "[B]" "[C]")
 ;; org-fancy-priorities-list '("‚ùó" "[B]" "[C]")
 org-fancy-priorities-list '("üü•" "üüß" "üü®")
 org-priority-faces
 '((?A :foreground "#ff6c6b" :weight bold)
   (?B :foreground "#98be65" :weight bold)
   (?C :foreground "#c678dd" :weight bold))
 org-agenda-block-separator 8411)

(setq org-agenda-custom-commands
      '(("v" "A better agenda view"
         ((tags "PRIORITY=\"A\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "High-priority unfinished tasks:")))
          (tags "PRIORITY=\"B\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "Medium-priority unfinished tasks:")))
          (tags "PRIORITY=\"C\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "Low-priority unfinished tasks:")))
          (tags "customtag"
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "Tasks marked with customtag:")))

          (agenda "")
          (alltodo "")))))
#+end_src

*** Show 12 hr clock
#+begin_src elisp
  (setq org-agenda-timegrid-use-ampm 1)
#+end_src

** Org roam
#+begin_src elisp
  (use-package org-roam
    :defer
    :after org
    :commands (org-roam-buffer-toggle
               org-roam-node-find
               org-roam-node-insert
               org-roam-node-insert-immediate)
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n I" . org-roam-node-insert-immediate))
    :config
    (setq org-roam-v2-ack t)
    (org-roam-setup)
    )
#+end_src

*** Useful function for quick notes
#+begin_src elisp
  ;; Bind this to C-c n I
  (defun org-roam-node-insert-immediate (arg &rest args)
    (interactive "P")
    (let ((args (cons arg args))
          (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                    '(:immediate-finish t)))))
      (apply #'org-roam-node-insert args)))
#+end_src

*** Brain UI
#+begin_src elisp
  (use-package org-roam-ui
    :commands (org-roam-ui-open)
    )
#+end_src

*** Roam export
#+begin_src elisp
  (require 'org-roam-export)
#+end_src

** Org fragtog
#+begin_src elisp
  (use-package org-fragtog
    :defer
    :hook (org-mode . org-fragtog-mode))
#+end_src

** Image drag-drop
#+begin_src elisp
  (use-package org-download)
#+end_src

** Hide marks
#+begin_src elisp
  (setq org-hide-emphasis-markers t)
#+end_src

*** Show emphasis markers interactively
#+begin_src elisp
  (use-package org-appear
    :defer
    :hook (org-mode . org-appear-mode))
#+end_src

** Tweaks
*** Follow link
#+begin_src elisp
  (setq org-return-follows-link t)
#+end_src

*** Further tweaks
#+begin_src elisp
  (setq org-startup-indented t
        org-startup-with-inline-images t
        org-pretty-entities t
        org-image-actual-width '(300))
#+end_src

* Latex
** Compiler settings
#+begin_src elisp
  (use-package auctex-latexmk
    :hook (latex-mode . auctex-latexmk-setup)
    :config
    (setq auctex-latexmk-inherit-TeX-PDF-mode t))
#+end_src 

* Project management
** Tabs and spaces
#+begin_src elisp
(setq tab-width 2)
(setq-default ident-tabs-mode nil)
#+end_src

** Projectile
#+begin_src elisp
  (use-package projectile
    :defer 
    :config
    (projectile-mode +1))
#+end_src

*** Ivy Integration
#+begin_src elisp
  (use-package counsel-projectile
    :after projectile
    :defer
    :commands
    (counsel-projectile-find-file
     counsel-projectile-grep
     counsel-projectile-switch-project
     counsel-projectile-switch-to-buffer)
    :config
    (counsel-projectile-mode 1))
#+end_src

** Git
#+begin_src elisp
  (use-package magit
    :commands magit
    )
  (elpaca-wait)
#+end_src

** File explorer
#+begin_src elisp
  (use-package neotree
    :defer
    :commands neotree-toggle
    :config
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow)
        neo-window-width 25
        neo-smart-open t
        neo-show-hidden-files t)
    :bind
    (:map evil-normal-state-map
          ("C-n" . neotree-toggle))
    )
#+end_src

* Buffers management
** Tmux navigation
#+begin_src elisp
  (use-package tmux-pane
    :defer 1
    :config
    (tmux-pane-mode)
    )
#+end_src

** Tabs
#+begin_src elisp
  (use-package centaur-tabs
    :defer 2
    :config
    (centaur-tabs-mode t)
    (centaur-tabs-headline-match)
    (setq centaur-tabs-height 40
          centaur-tabs-style "wave"
          centaur-tabs-set-icons t
          centaur-tabs-gray-out-icons 'buffer
          centaur-tabs-set-bar 'under
          x-underline-at-descent-line t
          centaur-tabs-set-modified-marker t))
#+end_src

** Jumping in the file
#+begin_src elisp
  (use-package avy
    :defer
    :commands (avy-goto-char-2))
#+end_src

* LSP stuff
** Yasnippet
#+begin_src elisp
  (use-package yasnippet-snippets
    :after yasnippet)

  (use-package yasnippet
    :defer 1
    :config
    (yas-global-mode 1)
    )
#+end_src

*** Ivy Integration
#+begin_src elisp
  (use-package ivy-yasnippet
    :defer
    :commands (ivy-yasnippet)
    :bind (:map evil-insert-state-map 
    ("C-c y" . ivy-yasnippet)))
#+end_src

#+RESULTS:
: ivy-yasnippet

** Eglot
#+begin_src elisp
  (use-package eglot
    :defer
    :hook
    (c++-mode . eglot-ensure)
    (tsx-ts-mode . eglot-ensure)
    (js-mode . eglot-ensure)
    (js-jsx-mode . eglot-ensure)
    :config
    (setq lsp-prefer-flymake nil
          lsp-prefer-capf t
          gc-cons-threshold 100000000
          read-process-output-max (* 1024 1024)
          lsp-idle-delay 0.5
          eglot-events-buffer-size 0
          lsp-log-io nil)
    )
#+end_src

#+RESULTS:

** Dap-mode
#+begin_src elisp
  (use-package dap-mode
    :after eglot
    :config
    (setq dap-auto-configure-mode t))
#+end_src

** Corfu
#+begin_src elisp
  (use-package corfu
    :defer
    ;; Optional customizations
    :hook
    (prog-mode . corfu-mode)
    (org-mode . corfu-mode)
    (corfu-mode . corfu-history-mode)
    (corfu-mode . corfu-echo-mode)
    :config
    (setq corfu-cycle t
          corfu-auto t
          corfu-auto-prefix 1
          corfu-auto-delay 0.0
          corfu-preview-current nil
          )
    :bind (:map corfu-map ("TAB" . corfu-next)
                ("S-TAB" . corfu-previous)
                ("RET" . nil)
                )
    )
#+end_src

#+RESULTS:

*** Icons
#+begin_src elisp
  (use-package nerd-icons-corfu
    :after corfu
    :config
    (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter)
    )
#+end_src

*** Other useful backends 
#+begin_src elisp
  (use-package cape
    :config
    (add-to-list 'completion-at-point-functions #'cape-file ))

  (use-package yasnippet-capf
    :elpaca (:host github :repo "elken/yasnippet-capf")
    :config
    (add-to-list 'completion-at-point-functions #'yasnippet-capf)
    (setq yasnippet-capf-lookup-by 'key)
    )
#+end_src

** Tree-sitter
#+begin_src elisp
  (use-package tree-sitter 
    :hook
    (tree-sitter-after-on . tree-sitter-hl-mode)
    :config
    (global-tree-sitter-mode)
    )
#+end_src

#+begin_src elisp
  (use-package tree-sitter-langs
    :after tree-sitter)
#+end_src

** Formatter
#+begin_src elisp
  (use-package format-all
    :hook (format-all-ensure-formatter . format-all-mode)
    (prog-mode . format-all-mode)
  )
#+end_src

** Indentation and parenthesis
*** Indent blankline
#+begin_src elisp
  ;; Indent blankline
  (use-package highlight-indent-guides
    :defer
    :hook (prog-mode . highlight-indent-guides-mode)
    :config
    (setq highlight-indent-guides-method 'character
        highlight-indent-guides-responsive 'top)
    )
#+end_src

*** Colorization
#+begin_src elisp
  (use-package rainbow-delimiters
    :defer
    :hook (prog-mode . rainbow-delimiters-mode))

  (use-package rainbow-mode
    :defer
    :hook (prog-mode . rainbow-mode))
#+end_src

*** Smart parentheses
#+begin_src elisp
  (use-package smartparens
    :hook
    (prog-mode . smartparens-mode)
    :config
    (require 'smartparens-config))
#+end_src

*** Smart html tags
#+begin_src elisp
  (use-package emmet-mode
    :defer
    :config
    (add-hook 'sgml-mode-hook 'emmet-mode) 
    (add-hook 'css-mode-hook  'emmet-mode)
    (add-hook 'emmet-jsx-major-modes 'js-mode 'typescript-mode)
    )
#+end_src

** Direnv support
#+begin_src elisp
  (use-package direnv
    :defer
    :hook (prog-mode . direnv-mode)
    )
#+end_src

** Programming language modes
*** Typescript
#+begin_src elisp
  (use-package tsx-ts-mode
    :elpaca nil
    :mode
    "\\.tsx\\'"
    "\\.ts\\'")
#+end_src

*** Nix
#+begin_src elisp
(use-package nix-mode
  :mode "\\.nix\\'")
#+end_src

*** Prisma
#+begin_src elisp
  (use-package prisma-mode
    :mode "\\.prisma\\'"
    :elpaca (:host github :repo "pimeys/emacs-prisma-mode" :branch "main"))
#+end_src

*** Markdown
#+begin_src elisp
  (use-package markdown-mode
    :mode ("README\\.md\\'" . gfm-mode)
    :config (setq markdown-command "pandoc")
    )
#+end_src

*** Arduino
#+begin_src elisp
  (use-package arduino-mode
    :mode ("\\.ino\\'" . arduino-mode)
    )
#+end_src

* Terminal
#+begin_src elisp
  (use-package vterm)

  (use-package vterm-toggle
    :commands vterm-toggle
    :defer
    :after vterm
    :config
    (setq vterm-toggle-fullscreen-p nil)
    (setq vterm-toggle-scope 'project)
    (add-to-list 'display-buffer-alist
                 '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                   (display-buffer-reuse-window display-buffer-at-bottom)
                   ;;(display-buffer-reuse-window display-buffer-in-direction)
                   ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                   ;;(direction . bottom)
                   (dedicated . t) ;dedicated is supported in emacs27
                   (reusable-frames . visible)
                   (window-height . 0.3))))
#+end_src

* Keybind management
** Which key
#+begin_src elisp
  (use-package which-key
    :defer 1
    :config
    (which-key-mode 1)
    (setq which-key-side-window-location 'bottom
          which-key-sort-order #'which-key-key-order-alpha
          which-key-sort-uppercase-first nil
          which-key-add-column-padding 1
          which-key-max-display-columns nil
          which-key-min-display-lines 6
          which-key-side-window-slot -10
          which-key-side-window-max-height 0.25
          which-key-idle-delay 0.8
          which-key-max-description-length 25
          which-key-allow-imprecise-window-fit t))

#+end_src

** General
#+begin_src elisp
  (use-package general
    :defer 2 
    :config
    (general-evil-setup)
    (general-create-definer ys/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC"
      :global-prefix "M-SPC")


    (ys/leader-keys
      "f" '(:ignore t :wk "projectile")
      "ff" '(counsel-projectile-find-file :wk "Find file")
      "fb" '(counsel-projectile-switch-to-buffer :wk "Switch to buffer")
      "fp" '(counsel-projectile-switch-project :wk "Switch project")
      "fg" '(counsel-projectile-grep :wk "Grep for file")
      )

    (ys/leader-keys
      "x" '(kill-this-buffer :wk "Kill buffer"))

    (ys/leader-keys
      "j" '(avy-goto-char-2 :wk "Search buffer"))

    (ys/leader-keys
      "s" '(:ignore t :wk "window")
      "sh" '(evil-window-split :wk "Horizontal split")
      "sv" '(evil-window-vsplit :wk "Vertical split")
      "sp" '(langtool-check :wk "Check with langtool")
      "sc" '(:ignore t :wk "Correct")
      "scp" '(langtool-correct-at-point :wk "Correct at point")
      "scb" '(langtool-correct-buffer :wk "Correct buffer"))

    (ys/leader-keys
      "b" '(evilnc-comment-or-uncomment-lines :wk "Comment"))


    (ys/leader-keys
      "t" '(vterm-toggle :wk "vterm")
      )

    (ys/leader-keys
      "e" '(emmet-expand-line :wk "emmet"))

    (ys/leader-keys
      "c" '(centaur-tabs-ace-jump :wk "Jump to tab")
      )

    (ys/leader-keys
      "l" '(:ignore t :wk "Lsp")
      "lr" '(eglot-rename :wk "Rename reference")
      "lf" '(format-all-buffer
             :wk "Formats buffer"))

    (ys/leader-keys
      "o" '(:ignore t :wk "Org")
      "oa" '(org-agenda :wk "Org agenda")
      "oe" '(org-export-dispatch :wk "Org export")
      "oi" '(org-toggle-item :wk "Org toggle Item")
      "ot" '(org-todo :wk "Org Todo")
      "oT" '(org-todo-list :wk "Org Todo List")
      "op" '(org-tree-slide-mode :wk "Present")
      )

    (ys/leader-keys
      "g" '(magit :wk "Open magit"))
    )
#+end_src

#+RESULTS:
: t

* UI
** Icons and status bar
#+begin_src elisp
  (use-package all-the-icons
    :if (display-graphic-p))

  (use-package doom-modeline
    :defer 1
    :config (doom-modeline-mode 1))
#+end_src

** Dashboard
#+begin_src elisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
  (setq dashboard-banner-logo-title "Welcome to Emacs")
  (setq dashboard-startup-banner 'logo)
  (setq dashboard-center-content t)

  ;; Sets which dashboard items should show
  (setq dashboard-items '((recents  . 5)
                          (bookmarks . 5)
                          (projects . 5)
                          (agenda . 5)))

  (setq dashboard-set-file-icons t)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-display-icons-p t
        dashboard-icon-type 'all-the-icons)
  (setq dashboard-heading-icons '((recents   . "history")
                                  (bookmarks . "bookmark")
                                  (agenda    . "calendar")
                                  (projects  . "rocket")
                                  (registers . "database"))))
#+end_src

** Theme
#+begin_src elisp
  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t
        doom-modeline-enable-word-count t
        )
    (load-theme 'doom-dracula t)
    (doom-themes-visual-bell-config)
    (doom-themes-neotree-config)
    (doom-themes-org-config))
#+end_src

** Font & relative line numbering
#+begin_src elisp
  (add-to-list 'default-frame-alist '(font . "JetBrainsMono NF-15"))
  (setq display-line-numbers-type 'relative 
        display-line-numbers-current-absolute t)
#+end_src

#+begin_src elisp
  (use-package display-line-numbers-mode
    :elpaca nil
    :defer
    :hook (prog-mode . display-line-numbers-mode)
    :config
    (setq display-line-numbers-type 'relative
          display-line-numbers-current-absolute t))
#+end_src

*** Remove line numbers in some modes
#+begin_src elisp
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  vterm-mode-hook
                  shell-mode-hook
  		neotree-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda() (display-line-numbers-mode 0))))
#+end_src

** Ligatures
#+begin_src elisp
  (use-package ligature
    :hook (prog-mode . ligature-mode)
    :config
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    ;; Enable all Cascadia Code ligatures in programming modes
    (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                         ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                         "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                         "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                         "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                         "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                         "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                         "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                         ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                         "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                         "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                         "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                         "\\\\" "://")))
#+end_src

** Cursor highlight
#+begin_src elisp
  (use-package beacon
    :defer 2
    :config
    (setq beacon-blink-when-window-scrolls t)
    (beacon-mode 1))
#+end_src

** Disable built in UI
#+begin_src elisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
#+end_src

** Transparent emacs
#+begin_src elisp
  (set-frame-parameter nil 'alpha-background 70) ; For current frame
  (add-to-list 'default-frame-alist '(alpha-background . 70)) ; For all new frames henceforth
#+end_src

** Centered text
#+begin_src elisp
  (use-package centered-window
    :defer
    :hook
    (org-mode . centered-window-mode))
#+end_src

* Grammar
** Language tool
Credit to doom-emacs devs
#+begin_src elisp
  (use-package langtool
    :commands (langtool-check
	       langtool-check-done
	       langtool-show-message-at-point
	       langtool-correct-buffer)
    :init (setq langtool-default-language "en-US")
    :config
    (unless (or langtool-bin
		langtool-language-tool-jar
		langtool-java-classpath)
      (cond ((setq langtool-bin
		   (or (executable-find "languagetool-commandline")
		       (executable-find "languagetool")))))))  ; for nixpkgs.languagetool
#+end_src

* Useful extra settings
** Automatic revert of buffers
#+begin_src elisp
;; Automatically reverts buffers for changed files
(global-auto-revert-mode 1)

;; Reverts dired as well
(setq global-auto-revert-non-file-buffers t)

;; Remembers the last place you visited in a file
(save-place-mode 1)
#+end_src

** Disables annoying features
#+begin_src elisp
  ;; Disable unrelated warnings
  (setq warning-minimum-level :error)

  ;; Disable lock file creation
  (setq create-lockfiles nil)

  ;; Removes annoying prompts
  (setq use-short-answers t)
#+end_src

** Backup storage location
#+begin_src elisp
(setq backup-directory-alist '(("." . "~/emacs/backups/")))
(setq auto-save-file-name-transforms '((".*" "~/emacs/auto-save-list/" t)))
#+end_src

